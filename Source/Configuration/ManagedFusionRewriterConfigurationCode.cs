//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The ManagedFusionRewriterSectionGroup Configuration Section.
	/// </summary>
	public partial class ManagedFusionRewriterSectionGroup : global::System.Configuration.ConfigurationSection
	{
		#region Rules Property
		
		/// <summary>
		/// The XML name of the <see cref="Rules"/> property.
		/// </summary>
		internal const global::System.String RulesPropertyName = "rules";
		
		/// <summary>
		/// Gets or sets the Rules.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(RulesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::ManagedFusion.Rewriter.Configuration.RulesSection Rules
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.RulesSection)base[RulesPropertyName];
			}
			set
			{
				base[RulesPropertyName] = value;
			}
		}
		
		#endregion

		#region Rewriter Property
		
		/// <summary>
		/// The XML name of the <see cref="Rewriter"/> property.
		/// </summary>
		internal const global::System.String RewriterPropertyName = "rewriter";
		
		/// <summary>
		/// Gets or sets the Rewriter.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(RewriterPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::ManagedFusion.Rewriter.Configuration.RewriterSection Rewriter
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.RewriterSection)base[RewriterPropertyName];
			}
			set
			{
				base[RewriterPropertyName] = value;
			}
		}
		
		#endregion

		#region Singleton Instance

		/// <summary>
		/// The XML name of the ManagedFusionRewriterSectionGroup Configuration Section.
		/// </summary>
		internal const global::System.String ManagedFusionRewriterSectionGroupSectionName = "managedFusion.rewriter";

		/// <summary>
		/// Gets the ManagedFusionRewriterSectionGroup instance.
		/// </summary>
		public static global::ManagedFusion.Rewriter.Configuration.ManagedFusionRewriterSectionGroup Instance
		{
			get
			{
				return global::System.Configuration.ConfigurationManager.GetSection(ManagedFusionRewriterSectionGroupSectionName) as global::ManagedFusion.Rewriter.Configuration.ManagedFusionRewriterSectionGroup;
			}
		}

		#endregion

		#region Xmlns Property
		
		/// <summary>
		/// The XML name of the <see cref="Xmlns"/> property.
		/// </summary>
		internal const global::System.String XmlnsPropertyName = "xmlns";
		
		/// <summary>
		/// Gets the XML namespace of this Configuration Section.
		/// </summary>
		/// <remarks>
		/// This property makes sure that if the configuration file contains the XML namespace,
		/// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
		/// </remarks>
		[global::System.Configuration.ConfigurationProperty(XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::System.String Xmlns
		{
			get
			{
				return (global::System.String)base[XmlnsPropertyName];
			}
		}
		
		#endregion
	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The RulesSection Configuration Element.
	/// </summary>
	public partial class RulesSection : global::System.Configuration.ConfigurationElement
	{
		#region Engine Property
		
		/// <summary>
		/// The XML name of the <see cref="Engine"/> property.
		/// </summary>
		internal const global::System.String EnginePropertyName = "engine";
		
		/// <summary>
		/// Gets or sets the Engine.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(EnginePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = RulesEngine.Apache)]
		public global::ManagedFusion.Rewriter.Configuration.RulesEngine Engine
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.RulesEngine)base[EnginePropertyName];
			}
			set
			{
				base[EnginePropertyName] = value;
			}
		}
		
		#endregion

		#region AllowOutputProcessing Property
		
		/// <summary>
		/// The XML name of the <see cref="AllowOutputProcessing"/> property.
		/// </summary>
		internal const global::System.String AllowOutputProcessingPropertyName = "allowOutputProcessing";
		
		/// <summary>
		/// Gets or sets the AllowOutputProcessing.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AllowOutputProcessingPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = false)]
		public global::System.Boolean AllowOutputProcessing
		{
			get
			{
				return (global::System.Boolean)base[AllowOutputProcessingPropertyName];
			}
			set
			{
				base[AllowOutputProcessingPropertyName] = value;
			}
		}
		
		#endregion

		#region Apache Property
		
		/// <summary>
		/// The XML name of the <see cref="Apache"/> property.
		/// </summary>
		internal const global::System.String ApachePropertyName = "apache";
		
		/// <summary>
		/// Gets or sets the Apache.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ApachePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::ManagedFusion.Rewriter.Configuration.ApacheSection Apache
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.ApacheSection)base[ApachePropertyName];
			}
			set
			{
				base[ApachePropertyName] = value;
			}
		}
		
		#endregion

		#region Microsoft Property
		
		/// <summary>
		/// The XML name of the <see cref="Microsoft"/> property.
		/// </summary>
		internal const global::System.String MicrosoftPropertyName = "microsoft";
		
		/// <summary>
		/// Gets or sets the Microsoft.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(MicrosoftPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::ManagedFusion.Rewriter.Configuration.MicrosoftSection Microsoft
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.MicrosoftSection)base[MicrosoftPropertyName];
			}
			set
			{
				base[MicrosoftPropertyName] = value;
			}
		}
		
		#endregion

	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// A collection of ApacheRuleSetItem instances.
	/// </summary>
	[global::System.Configuration.ConfigurationCollection(typeof(global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName = global::ManagedFusion.Rewriter.Configuration.ApacheSection.ApacheRuleSetItemPropertyName)]
	public partial class ApacheSection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants
		
		/// <summary>
		/// The XML name of the individual <see cref="global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem"/> instances in this collection.
		/// </summary>
		internal const global::System.String ApacheRuleSetItemPropertyName = "ruleSet";

		#endregion

		#region Overrides

		/// <summary>
		/// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
		public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			get
			{
				return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
			}
		}

		/// <summary>
		/// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="elementName">The name of the element to verify.</param>
		/// <returns>
		/// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>. The default is <see langword="false"/>.
		/// </returns>
		protected override global::System.Boolean IsElementName(global::System.String elementName)
		{
			return (elementName == ApacheRuleSetItemPropertyName);
		}

		/// <summary>
		/// Gets the element key for a specified configuration element when overridden in a derived class.
		/// </summary>
		/// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
		/// <returns>
		/// An <see cref="global::System.Object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		protected override global::System.Object GetElementKey(global::System.Configuration.ConfigurationElement element)
		{
			return ((global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem)element).ApplicationPath;
		}

		/// <summary>
		/// When overridden in a derived class, creates a new <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </summary>
		/// <returns>
		/// A new <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		protected override global::System.Configuration.ConfigurationElement CreateNewElement()
		{
			return new global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem();
		}

		#endregion
		
		#region Indexer

		/// <summary>
		/// Gets the <see cref="global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem"/> at the specified index.
		/// </summary>
		/// <param name="index">The index of the <see cref="global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem"/> to retrieve</param>
		public global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem this[int index]
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.ApacheRuleSetItem)this.BaseGet(index);
			}
		}

		#endregion
		#region DefaultFileName Property
		
		/// <summary>
		/// The XML name of the <see cref="DefaultFileName"/> property.
		/// </summary>
		internal const global::System.String DefaultFileNamePropertyName = "defaultFileName";
		
		/// <summary>
		/// Gets or sets the DefaultFileName.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(DefaultFileNamePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "ManagedFusion.Rewriter.txt")]
		public global::System.String DefaultFileName
		{
			get
			{
				return (global::System.String)base[DefaultFileNamePropertyName];
			}
			set
			{
				base[DefaultFileNamePropertyName] = value;
			}
		}
		
		#endregion

		#region DefaultPhysicalApplicationPath Property
		
		/// <summary>
		/// The XML name of the <see cref="DefaultPhysicalApplicationPath"/> property.
		/// </summary>
		internal const global::System.String DefaultPhysicalApplicationPathPropertyName = "defaultPhysicalApplicationPath";
		
		/// <summary>
		/// Gets or sets the DefaultPhysicalApplicationPath.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(DefaultPhysicalApplicationPathPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::System.String DefaultPhysicalApplicationPath
		{
			get
			{
				return (global::System.String)base[DefaultPhysicalApplicationPathPropertyName];
			}
			set
			{
				base[DefaultPhysicalApplicationPathPropertyName] = value;
			}
		}
		
		#endregion

	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The MicrosoftSection Configuration Element.
	/// </summary>
	public partial class MicrosoftSection : global::System.Configuration.ConfigurationElement
	{
	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The ApacheRuleSetItem Configuration Element.
	/// </summary>
	public partial class ApacheRuleSetItem : global::System.Configuration.ConfigurationElement
	{
		#region ApplicationPath Property
		
		/// <summary>
		/// The XML name of the <see cref="ApplicationPath"/> property.
		/// </summary>
		internal const global::System.String ApplicationPathPropertyName = "applicationPath";
		
		/// <summary>
		/// Gets or sets the ApplicationPath.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ApplicationPathPropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
		public global::System.String ApplicationPath
		{
			get
			{
				return (global::System.String)base[ApplicationPathPropertyName];
			}
			set
			{
				base[ApplicationPathPropertyName] = value;
			}
		}
		
		#endregion

		#region ConfigPath Property
		
		/// <summary>
		/// The XML name of the <see cref="ConfigPath"/> property.
		/// </summary>
		internal const global::System.String ConfigPathPropertyName = "configPath";
		
		/// <summary>
		/// Gets or sets the ConfigPath.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ConfigPathPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
		public global::System.String ConfigPath
		{
			get
			{
				return (global::System.String)base[ConfigPathPropertyName];
			}
			set
			{
				base[ConfigPathPropertyName] = value;
			}
		}
		
		#endregion

	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The ProxySection Configuration Element.
	/// </summary>
	public partial class ProxySection : global::System.Configuration.ConfigurationElement
	{
		#region UseAsyncProxy Property
		
		/// <summary>
		/// The XML name of the <see cref="UseAsyncProxy"/> property.
		/// </summary>
		internal const global::System.String UseAsyncProxyPropertyName = "useAsyncProxy";
		
		/// <summary>
		/// Gets or sets the UseAsyncProxy.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(UseAsyncProxyPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean UseAsyncProxy
		{
			get
			{
				return (global::System.Boolean)base[UseAsyncProxyPropertyName];
			}
			set
			{
				base[UseAsyncProxyPropertyName] = value;
			}
		}
		
		#endregion

		#region BufferSize Property
		
		/// <summary>
		/// The XML name of the <see cref="BufferSize"/> property.
		/// </summary>
		internal const global::System.String BufferSizePropertyName = "bufferSize";
		
		/// <summary>
		/// Gets or sets the BufferSize.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(BufferSizePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = 4096)]
		public global::System.Int32 BufferSize
		{
			get
			{
				return (global::System.Int32)base[BufferSizePropertyName];
			}
			set
			{
				base[BufferSizePropertyName] = value;
			}
		}
		
		#endregion

		#region ResponseSize Property
		
		/// <summary>
		/// The XML name of the <see cref="ResponseSize"/> property.
		/// </summary>
		internal const global::System.String ResponseSizePropertyName = "responseSize";
		
		/// <summary>
		/// Gets or sets the ResponseSize.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ResponseSizePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = 2048)]
		public global::System.Int32 ResponseSize
		{
			get
			{
				return (global::System.Int32)base[ResponseSizePropertyName];
			}
			set
			{
				base[ResponseSizePropertyName] = value;
			}
		}
		
		#endregion

		#region RequestSize Property
		
		/// <summary>
		/// The XML name of the <see cref="RequestSize"/> property.
		/// </summary>
		internal const global::System.String RequestSizePropertyName = "requestSize";
		
		/// <summary>
		/// Gets or sets the RequestSize.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(RequestSizePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = 2048)]
		public global::System.Int32 RequestSize
		{
			get
			{
				return (global::System.Int32)base[RequestSizePropertyName];
			}
			set
			{
				base[RequestSizePropertyName] = value;
			}
		}
		
		#endregion

		#region ProxyType Property
		
		/// <summary>
		/// The XML name of the <see cref="ProxyType"/> property.
		/// </summary>
		internal const global::System.String ProxyTypePropertyName = "proxyType";
		
		/// <summary>
		/// Gets or sets the ProxyType.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ProxyTypePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "ManagedFusion.Rewriter.ProxyHandler, ManagedFusion.Rewriter")]
		public global::System.String ProxyType
		{
			get
			{
				return (global::System.String)base[ProxyTypePropertyName];
			}
			set
			{
				base[ProxyTypePropertyName] = value;
			}
		}
		
		#endregion

		#region ProxyAsyncType Property
		
		/// <summary>
		/// The XML name of the <see cref="ProxyAsyncType"/> property.
		/// </summary>
		internal const global::System.String ProxyAsyncTypePropertyName = "proxyAsyncType";
		
		/// <summary>
		/// Gets or sets the ProxyAsyncType.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ProxyAsyncTypePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "ManagedFusion.Rewriter.ProxyAsyncHandler, ManagedFusion.Rewriter")]
		public global::System.String ProxyAsyncType
		{
			get
			{
				return (global::System.String)base[ProxyAsyncTypePropertyName];
			}
			set
			{
				base[ProxyAsyncTypePropertyName] = value;
			}
		}
		
		#endregion

	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The RewriterSection Configuration Element.
	/// </summary>
	public partial class RewriterSection : global::System.Configuration.ConfigurationElement
	{
		#region TraceLog Property
		
		/// <summary>
		/// The XML name of the <see cref="TraceLog"/> property.
		/// </summary>
		internal const global::System.String TraceLogPropertyName = "traceLog";
		
		/// <summary>
		/// Gets or sets the TraceLog.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(TraceLogPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = false)]
		public global::System.Boolean TraceLog
		{
			get
			{
				return (global::System.Boolean)base[TraceLogPropertyName];
			}
			set
			{
				base[TraceLogPropertyName] = value;
			}
		}
		
		#endregion

		#region RebaseClientPath Property
		
		/// <summary>
		/// The XML name of the <see cref="RebaseClientPath"/> property.
		/// </summary>
		internal const global::System.String RebaseClientPathPropertyName = "rebaseClientPath";
		
		/// <summary>
		/// Gets or sets the RebaseClientPath.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(RebaseClientPathPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean RebaseClientPath
		{
			get
			{
				return (global::System.Boolean)base[RebaseClientPathPropertyName];
			}
			set
			{
				base[RebaseClientPathPropertyName] = value;
			}
		}
		
		#endregion

		#region AllowIis7TransferRequest Property
		
		/// <summary>
		/// The XML name of the <see cref="AllowIis7TransferRequest"/> property.
		/// </summary>
		internal const global::System.String AllowIis7TransferRequestPropertyName = "allowIis7TransferRequest";
		
		/// <summary>
		/// Gets or sets the AllowIis7TransferRequest.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AllowIis7TransferRequestPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean AllowIis7TransferRequest
		{
			get
			{
				return (global::System.Boolean)base[AllowIis7TransferRequestPropertyName];
			}
			set
			{
				base[AllowIis7TransferRequestPropertyName] = value;
			}
		}
		
		#endregion

		#region AllowVanityHeader Property
		
		/// <summary>
		/// The XML name of the <see cref="AllowVanityHeader"/> property.
		/// </summary>
		internal const global::System.String AllowVanityHeaderPropertyName = "allowVanityHeader";
		
		/// <summary>
		/// Gets or sets the AllowVanityHeader.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AllowVanityHeaderPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean AllowVanityHeader
		{
			get
			{
				return (global::System.Boolean)base[AllowVanityHeaderPropertyName];
			}
			set
			{
				base[AllowVanityHeaderPropertyName] = value;
			}
		}
		
		#endregion

		#region AllowXRewriteUrlHeader Property
		
		/// <summary>
		/// The XML name of the <see cref="AllowXRewriteUrlHeader"/> property.
		/// </summary>
		internal const global::System.String AllowXRewriteUrlHeaderPropertyName = "allowXRewriteUrlHeader";
		
		/// <summary>
		/// Gets or sets the AllowXRewriteUrlHeader.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AllowXRewriteUrlHeaderPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean AllowXRewriteUrlHeader
		{
			get
			{
				return (global::System.Boolean)base[AllowXRewriteUrlHeaderPropertyName];
			}
			set
			{
				base[AllowXRewriteUrlHeaderPropertyName] = value;
			}
		}
		
		#endregion

		#region AllowRequestHeaderAdding Property
		
		/// <summary>
		/// The XML name of the <see cref="AllowRequestHeaderAdding"/> property.
		/// </summary>
		internal const global::System.String AllowRequestHeaderAddingPropertyName = "allowRequestHeaderAdding";
		
		/// <summary>
		/// Gets or sets the AllowRequestHeaderAdding.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AllowRequestHeaderAddingPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean AllowRequestHeaderAdding
		{
			get
			{
				return (global::System.Boolean)base[AllowRequestHeaderAddingPropertyName];
			}
			set
			{
				base[AllowRequestHeaderAddingPropertyName] = value;
			}
		}
		
		#endregion

		#region AllowServerVariableSetting Property
		
		/// <summary>
		/// The XML name of the <see cref="AllowServerVariableSetting"/> property.
		/// </summary>
		internal const global::System.String AllowServerVariableSettingPropertyName = "allowServerVariableSetting";
		
		/// <summary>
		/// Gets or sets the AllowServerVariableSetting.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AllowServerVariableSettingPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean AllowServerVariableSetting
		{
			get
			{
				return (global::System.Boolean)base[AllowServerVariableSettingPropertyName];
			}
			set
			{
				base[AllowServerVariableSettingPropertyName] = value;
			}
		}
		
		#endregion

		#region ModifyIIS7WorkerRequest Property
		
		/// <summary>
		/// The XML name of the <see cref="ModifyIIS7WorkerRequest"/> property.
		/// </summary>
		internal const global::System.String ModifyIIS7WorkerRequestPropertyName = "modifyIIS7WorkerRequest";
		
		/// <summary>
		/// Gets or sets the ModifyIIS7WorkerRequest.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ModifyIIS7WorkerRequestPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = true)]
		public global::System.Boolean ModifyIIS7WorkerRequest
		{
			get
			{
				return (global::System.Boolean)base[ModifyIIS7WorkerRequestPropertyName];
			}
			set
			{
				base[ModifyIIS7WorkerRequestPropertyName] = value;
			}
		}
		
		#endregion

		#region Proxy Property
		
		/// <summary>
		/// The XML name of the <see cref="Proxy"/> property.
		/// </summary>
		internal const global::System.String ProxyPropertyName = "proxy";
		
		/// <summary>
		/// Gets or sets the Proxy.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ProxyPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::ManagedFusion.Rewriter.Configuration.ProxySection Proxy
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.ProxySection)base[ProxyPropertyName];
			}
			set
			{
				base[ProxyPropertyName] = value;
			}
		}
		
		#endregion

		#region Modules Property
		
		/// <summary>
		/// The XML name of the <see cref="Modules"/> property.
		/// </summary>
		internal const global::System.String ModulesPropertyName = "modules";
		
		/// <summary>
		/// Gets or sets the Modules.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(ModulesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public global::ManagedFusion.Rewriter.Configuration.RewriterModulesSection Modules
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.RewriterModulesSection)base[ModulesPropertyName];
			}
			set
			{
				base[ModulesPropertyName] = value;
			}
		}
		
		#endregion

	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// A collection of RewriterModuleItem instances.
	/// </summary>
	[global::System.Configuration.ConfigurationCollection(typeof(global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap)]
	public partial class RewriterModulesSection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants
		
		/// <summary>
		/// The XML name of the individual <see cref="global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem"/> instances in this collection.
		/// </summary>
		internal const global::System.String RewriterModuleItemPropertyName = "add";

		#endregion

		#region Overrides

		/// <summary>
		/// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
		public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			get
			{
				return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap;
			}
		}

		/// <summary>
		/// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
		/// </summary>
		/// <param name="elementName">The name of the element to verify.</param>
		/// <returns>
		/// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>. The default is <see langword="false"/>.
		/// </returns>
		protected override global::System.Boolean IsElementName(global::System.String elementName)
		{
			return (elementName == RewriterModuleItemPropertyName);
		}

		/// <summary>
		/// Gets the element key for a specified configuration element when overridden in a derived class.
		/// </summary>
		/// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
		/// <returns>
		/// An <see cref="global::System.Object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		protected override global::System.Object GetElementKey(global::System.Configuration.ConfigurationElement element)
		{
			return ((global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem)element).Name;
		}

		/// <summary>
		/// When overridden in a derived class, creates a new <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </summary>
		/// <returns>
		/// A new <see cref="global::System.Configuration.ConfigurationElement"/>.
		/// </returns>
		protected override global::System.Configuration.ConfigurationElement CreateNewElement()
		{
			return new global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem();
		}

		#endregion
		
		#region Indexer

		/// <summary>
		/// Gets the <see cref="global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem"/> at the specified index.
		/// </summary>
		/// <param name="index">The index of the <see cref="global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem"/> to retrieve</param>
		public global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem this[int index]
		{
			get
			{
				return (global::ManagedFusion.Rewriter.Configuration.RewriterModuleItem)this.BaseGet(index);
			}
		}

		#endregion
	}
}

namespace ManagedFusion.Rewriter.Configuration
{
	/// <summary>
	/// The RewriterModuleItem Configuration Element.
	/// </summary>
	public partial class RewriterModuleItem : global::System.Configuration.ConfigurationElement
	{
		#region Name Property
		
		/// <summary>
		/// The XML name of the <see cref="Name"/> property.
		/// </summary>
		internal const global::System.String NamePropertyName = "name";
		
		/// <summary>
		/// Gets or sets the Name.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
		public global::System.String Name
		{
			get
			{
				return (global::System.String)base[NamePropertyName];
			}
			set
			{
				base[NamePropertyName] = value;
			}
		}
		
		#endregion

		#region Type Property
		
		/// <summary>
		/// The XML name of the <see cref="Type"/> property.
		/// </summary>
		internal const global::System.String TypePropertyName = "type";
		
		/// <summary>
		/// Gets or sets the Type.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(TypePropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
		public global::System.Type Type
		{
			get
			{
				return (global::System.Type)base[TypePropertyName];
			}
			set
			{
				base[TypePropertyName] = value;
			}
		}
		
		#endregion

	}
}

